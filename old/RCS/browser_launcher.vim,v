head	1.28;
access;
symbols;
locks; strict;
comment	@# @;


1.28
date	2020.09.12.03.00.48;	author Heptite;	state Exp;
branches;
next	1.27;

1.27
date	2020.02.02.21.41.17;	author Heptite;	state Exp;
branches;
next	1.26;

1.26
date	2020.02.01.03.50.34;	author Heptite;	state Exp;
branches;
next	1.25;

1.25
date	2020.01.30.05.58.23;	author Heptite;	state Exp;
branches;
next	1.24;

1.24
date	2020.01.28.02.19.26;	author Heptite;	state Exp;
branches;
next	1.23;

1.23
date	2020.01.26.22.08.15;	author Heptite;	state Exp;
branches;
next	1.22;

1.22
date	2011.04.13.22.20.48;	author infynity;	state Exp;
branches;
next	1.21;

1.21
date	2011.04.13.20.22.16;	author infynity;	state Exp;
branches;
next	1.20;

1.20
date	2011.04.12.17.30.07;	author infynity;	state Exp;
branches;
next	1.19;

1.19
date	2010.06.03.05.14.40;	author infynity;	state Exp;
branches;
next	1.18;

1.18
date	2009.09.21.22.36.46;	author infynity;	state Exp;
branches;
next	1.17;

1.17
date	2009.09.19.19.43.09;	author infynity;	state Exp;
branches;
next	1.16;

1.16
date	2009.09.17.15.38.15;	author infynity;	state Exp;
branches;
next	1.15;

1.15
date	2009.06.23.14.04.30;	author infynity;	state Exp;
branches;
next	1.14;

1.14
date	2008.06.15.05.45.45;	author infynity;	state Exp;
branches;
next	1.13;

1.13
date	2008.05.16.11.06.30;	author infynity;	state Exp;
branches;
next	1.12;

1.12
date	2008.05.15.01.51.22;	author infynity;	state Exp;
branches;
next	1.11;

1.11
date	2007.07.07.11.18.01;	author infynity;	state Exp;
branches;
next	1.10;

1.10
date	2007.05.30.08.14.06;	author infynity;	state Exp;
branches;
next	1.9;

1.9
date	2006.11.27.09.01.47;	author infynity;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.28.09.44.51;	author infynity;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.12.18.11.00;	author infynity;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.11.13.05.49;	author infynity;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.20.08.19.39;	author infynity;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.17.02.12.25;	author infynity;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.12.05.54.57;	author infynity;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.20.15.19.11;	author infynity;	state Exp;
branches;
next	1.1;

1.1
date	2003.04.20.13.55.17;	author infynity;	state Exp;
branches;
next	;


desc
@Function to handle various browsers, used by HTML.vim.
@


1.28
log
@Start transition to Vim 8
@
text
@"--------------------------------------------------------------------------
"
" Vim script to launch/control browsers
"
" Copyright ????-2020 Christian J. Robinson <heptite@@gmail.com>
"
" Distributable under the terms of the GNU GPL.
"
" Currently supported browsers:
" Unix:
"  - Firefox  (remote [new window / new tab] / launch)
"    (This will fall back to Iceweasel for Debian installs.)
"  - Chrome   (remote [new window / new tab] / launch)
"    (This will fall back to Chromium if it's installed and Chrome isn't.)
"  - Opera    (remote [new window / new tab] / launch)
"  - Lynx     (Under the current TTY if not running the GUI, or a new xterm
"              window if DISPLAY is set.)
"  - w3m      (Under the current TTY if not running the GUI, or a new xterm
"              window if DISPLAY is set.)
" MacOS:
"  - Firefox  (remote [new window / new tab] / launch)
"  - Opera    (remote [new window / new tab] / launch)
"  - Safari   (remote [new window / new tab] / launch)
"  - Default
"
" Windows and Cygwin:
"  - Firefox  (remote [new window / new tab] / launch)
"  - Opera    (remote [new window / new tab] / launch)
"  - Chrome   (remote [new window / new tab] / launch)
"
" TODO:
"
"  - Support more browsers, especially on MacOS
"    Note: Various browsers such as Galeon, Nautilus, Phoenix, &c use the
"    same HTML rendering engine as Firefox, so supporting them isn't as
"    important. Others use the same engine as Chrome/Chromium (Opera?).
"
"  - Defaulting to Lynx if the the GUI isn't available on Unix may be
"    undesirable.
"
" BUGS:
"  * On Unix, since the commands to start the browsers are run in the
"    backgorund when possible there's no way to actually get v:shell_error,
"    so execution errors aren't actually seen.
"
"  * On Windows (and Cygwin) there's no reliable way to detect which
"    browsers are installed so a few are defined automatically.
"
"  * This code is messy and needs to be rethought.
"
"--------------------------------------------------------------------------
" $Id: browser_launcher.vim,v 1.27 2020/02/02 21:41:17 Heptite Exp $
"--------------------------------------------------------------------------

if v:version < 8
	finish
endif

command! -nargs=+ BRCWARN :echohl WarningMsg | echomsg <q-args> | echohl None
command! -nargs=+ BRCERROR :echohl ErrorMsg | echomsg <q-args> | echohl None
command! -nargs=+ BRCMESG :echohl Todo | echo <q-args> | echohl None

function! s:ShellEscape(str) " {{{
	if exists('*shellescape')
		return shellescape(a:str)
	else
		return "'" . a:str->substitute("'", "'\\\\''", 'g') . "'"
	endif
endfunction " }}}


if has('mac') || has('macunix')  " {{{1
	if exists("*OpenInMacApp")
		finish
	endif

	" The following code is provided by Israel Chauca Fuentes
	" <israelvarios()fastmail!fm>:

	function! s:MacAppExists(app) " {{{
		 silent! call system("/usr/bin/osascript -e 'get id of application \"" .
				\ a:app . "\"' 2>&1 >/dev/null")
		if v:shell_error
			return 0
		endif
		return 1
	endfunction " }}}

	function! s:UseAppleScript() " {{{
		return system("/usr/bin/osascript -e " .
			 \ "'tell application \"System Events\" to set UI_enabled " .
			 \ "to UI elements enabled' 2>/dev/null") ==? "true\n" ? 1 : 0
	endfunction " }}}

	function! OpenInMacApp(app, ...) " {{{
		if (! s:MacAppExists(a:app) && a:app !=? 'default')
			exec 'BRCERROR ' . a:app . " not found"
			return 0
		endif

		if a:0 >= 1 && a:0 <= 2
			let l:new = a:1
		else
			let l:new = 0
		endif

		let l:file = expand('%:p')

		" Can we open new tabs and windows?
		let l:use_AS = s:UseAppleScript()

		" Why we can't open new tabs and windows:
		let l:as_msg = "This feature utilizes the built-in Graphic User " .
				\ "Interface Scripting architecture of Mac OS X which is " .
				\ "currently disabled. You can activate GUI Scripting by " .
				\ "selecting the checkbox \"Enable access for assistive " .
				\ "devices\" in the Universal Access preference pane."

		if (a:app ==? 'safari') " {{{
			if l:new != 0 && l:use_AS
				if l:new == 2
					let l:torn = 't'
					BRCMESG Opening file in new Safari tab...
				else
					let l:torn = 'n'
					BRCMESG Opening file in new Safari window...
				endif
				let l:script = '-e "tell application \"safari\"" ' .
				\ '-e "activate" ' .
				\ '-e "tell application \"System Events\"" ' .
				\ '-e "tell process \"safari\"" ' .
				\ '-e "keystroke \"' . torn . '\" using {command down}" ' .
				\ '-e "end tell" ' .
				\ '-e "end tell" ' .
				\ '-e "delay 0.3" ' .
				\ '-e "tell window 1" ' .
				\ '-e ' . s:ShellEscape("set (URL of last tab) to \"" . l:file . "\"") . ' ' .
				\ '-e "end tell" ' .
				\ '-e "end tell" '

				let l:command = "/usr/bin/osascript " . script

			else
				if l:new != 0
					" Let the user know what's going on:
					exec 'BRCERROR ' . l:as_msg
				endif
				BRCMESG Opening file in Safari...
				let l:command = "/usr/bin/open -a safari " . s:ShellEscape(l:file)
			endif
		endif "}}}

		if (a:app ==? 'firefox') " {{{
			if l:new != 0 && l:use_AS
				if l:new == 2

					let l:torn = 't'
					BRCMESG Opening file in new Firefox tab...
				else

					let l:torn = 'n'
					BRCMESG Opening file in new Firefox window...
				endif
				let l:script = '-e "tell application \"firefox\"" ' .
				\ '-e "activate" ' .
				\ '-e "tell application \"System Events\"" ' .
				\ '-e "tell process \"firefox\"" ' .
				\ '-e "keystroke \"' . l:torn . '\" using {command down}" ' .
				\ '-e "delay 0.8" ' .
				\ '-e "keystroke \"l\" using {command down}" ' .
				\ '-e "keystroke \"a\" using {command down}" ' .
				\ '-e ' . s:ShellEscape("keystroke \"" . l:file . "\" & return") . " " .
				\ '-e "end tell" ' .
				\ '-e "end tell" ' .
				\ '-e "end tell" '

				let l:command = "/usr/bin/osascript " . script

			else
				if l:new != 0
					" Let the user know wath's going on:
					exec 'BRCERROR ' . l:as_msg

				endif
				BRCMESG Opening file in Firefox...
				let l:command = "/usr/bin/open -a firefox " . s:ShellEscape(l:file)
			endif
		endif " }}}

		if (a:app ==? 'opera') " {{{
			if l:new != 0 && l:use_AS
				if l:new == 2

					let l:torn = 't'
					BRCMESG Opening file in new Opera tab...
				else

					let l:torn = 'n'
					BRCMESG Opening file in new Opera window...
				endif
				let l:script = '-e "tell application \"Opera\"" ' .
				\ '-e "activate" ' .
				\ '-e "tell application \"System Events\"" ' .
				\ '-e "tell process \"opera\"" ' .
				\ '-e "keystroke \"' . l:torn . '\" using {command down}" ' .
				\ '-e "end tell" ' .
				\ '-e "end tell" ' .
				\ '-e "delay 0.5" ' .
				\ '-e ' . s:ShellEscape("set URL of front document to \"" . l:file . "\"") . " " .
				\ '-e "end tell" '

				let l:command = "/usr/bin/osascript " . l:script

			else
				if l:new != 0
					" Let the user know what's going on:
					exec 'BRCERROR ' . l:as_msg

				endif
				BRCMESG Opening file in Opera...
				let l:command = "/usr/bin/open -a opera " . s:ShellEscape(l:file)
			endif
		endif " }}}

		if (a:app ==? 'default')

			BRCMESG Opening file in default browser...
			let l:command = "/usr/bin/open " . s:ShellEscape(l:file)
		endif

		if (! exists('command'))

			exe 'BRCMESG Opening ' . a:app->substitute('^.', '\U&', '') . '...'
			let l:command = "open -a " . a:app . " " . s:ShellEscape(l:file)
		endif

		call system(command . " 2>&1 >/dev/null")
	endfunction " }}}

	finish

elseif has('unix') && ! has('win32unix') " {{{1

	let s:Browsers = {}
	" Set this manually, since the first in the list is the default:
	let s:BrowsersExist = 'fcolw'
	let s:Browsers['f'] = [['firefox', 'iceweasel'],               '']
	let s:Browsers['c'] = [['google-chrome', 'chromium-browser'],  '']
	let s:Browsers['o'] = ['opera',                                '']
	let s:Browsers['l'] = ['lynx',                                 '']
	let s:Browsers['w'] = ['w3m',                                  '']

	for s:temp1 in keys(s:Browsers)
		for s:temp2 in (type(s:Browsers[s:temp1][0]) == type([]) ? s:Browsers[s:temp1][0] : [s:Browsers[s:temp1][0]])
			let s:temp3 = system("which " . s:temp2)
			if v:shell_error == 0
				break
			endif
		endfor

		if v:shell_error == 0
			let s:Browsers[s:temp1][0] = s:temp2
			let s:Browsers[s:temp1][1] = s:temp3->substitute("\n$", '', '')
		else
			let s:BrowsersExist = s:BrowsersExist->substitute(s:temp1, '', 'g')
		endif
	endfor

	"for [key, value] in s:Browsers->items()
	"	echomsg key . ': ' . join(value, ', ')
	"endfor

	unlet s:temp1 s:temp2 s:temp3

elseif has('win32') || has('win64') || has('win32unix')  " {{{1

	" No reliably scriptable way to detect installed browsers, so just add
	" support for a few and let the Windows system complain if a browser
	" doesn't exist:
	let s:Browsers = {}
	let s:BrowsersExist = 'fco'
	let s:Browsers['f'] = ['firefox', '']
	let s:Browsers['c'] = ['chrome',  '']
	let s:Browsers['o'] = ['opera',   '']
	
else " {{{1

	BRCWARN Your OS is not recognized, browser controls will not work.

	finish

endif " }}}1

if exists("*LaunchBrowser")
	finish
endif

" LaunchBrowser() {{{1
"
" Usage:
"  :call LaunchBrowser({[fcolw] | default}, {[012]}, [url])
"    The first argument is which browser to launch:
"      f - Firefox
"      c - Chrome
"      o - Opera
"      l - Lynx
"      w - w3m
"
"      default - This launches the first browser that was actually found.
"                (This isn't actually used, and may go away in the future.)
"
"    The second argument is whether to launch a new window:
"      0 - No
"      1 - Yes
"      2 - New Tab (or new window if the browser doesn't provide a way to
"                   open a new tab)
"
"    The optional third argument is an URL to go to instead of loading the
"    current file.
"
" Return value:
"  0 - Failure (No browser was launched/controlled.)
"  1 - Success
"
" A special case of no arguments returns a character list of what browsers
" were found.
function! LaunchBrowser(...)

	let l:err = 0

	if a:0 == 0
		return s:BrowsersExist
	elseif a:0 >= 2
		let l:which = a:1
		let l:new = a:2
	else
		let l:err = 1
	endif

	" If we're on Cygwin, translate the file path to a Windows native path
	" for later use, otherwise just add the file:// prefix:
	let l:file = 'file://' .
			\(has('win32unix') ?
				\ system('cygpath -w ' . expand('%:p')->s:ShellEscape())->substitute("\n$", '', '') :
				\ expand('%:p')
			\)

	if a:0 == 3
		let l:file = a:3
	elseif a:0 > 3
		let l:err = 1
	endif

	if l:err
		exe 'BRCERROR E119: Wrong number of arguments for function: '
					\ . expand('<sfile>')->substitute('^function ', '', '')
		return 0
	endif

	if l:which ==? 'default'
		let l:which = s:BrowsersExist->strpart(0, 1)
	endif

	if s:BrowsersExist !~? l:which
		if exists('s:Browsers[l:which]')
			exe 'BRCERROR '
						\ . (s:Browsers[l:which][0]->type() == type([]) ? s:Browsers[l:which][0][0] : s:Browsers[l:which][0])
						\ . ' not found'
		else
			exe 'BRCERROR Unknown browser ID: ' . l:which
		endif

		return 0
	endif

	if has('unix') && (! strlen($DISPLAY) || l:which ==? 'l') " {{{
		BRCMESG Launching lynx...

		if (has("gui_running") || l:new) && strlen($DISPLAY)
			let l:command='xterm -T Lynx -e lynx ' . s:ShellEscape(l:file) . ' &'
		else
			sleep 1
			execute "!lynx " . s:ShellEscape(l:file)

			if v:shell_error
				BRCERROR Unable to launch lynx.
				return 0
			endif
		endif
	endif " }}}

	if has('unix') && (l:which ==? 'w') " {{{
		BRCMESG Launching w3m...

		if (has("gui_running") || l:new) && strlen($DISPLAY)
			let l:command='xterm -T w3m -e w3m ' . s:ShellEscape(l:file) . ' &'
		else
			sleep 1
			execute "!w3m " . s:ShellEscape(l:file)

			if v:shell_error
				BRCERROR Unable to launch w3m.
				return 0
			endif
		endif
	endif " }}}

	if (l:which ==? 'o') " {{{
		if l:new == 2
			BRCMESG Opening new Opera tab...
			if has('win32') || has('win64') || has('win32unix')
				let l:command='start ' . s:Browsers[l:which][0] . ' ' . <SID>ShellEscape(l:file)
			else
				let l:command="sh -c \"trap '' HUP; " . s:Browsers[l:which][1] . " " . s:ShellEscape(l:file) . " &\""
			endif
		elseif l:new
			BRCMESG Opening new Opera window...
			if has('win32') || has('win64') || has('win32unix')
				let l:command='start ' . s:Browsers[l:which][0] . ' ' . <SID>ShellEscape(l:file) . ' --new-window'
			else
				let l:command="sh -c \"trap '' HUP; " . s:Browsers[l:which][1] . " " . s:ShellEscape(l:file) . " --new-window &\""
			endif
		else
			BRCMESG Sending remote command to Opera...
			if has('win32') || has('win64') || has('win32unix')
				let l:command='start ' . s:Browsers[l:which][0] . ' ' . <SID>ShellEscape(l:file)
			else
				let l:command="sh -c \"trap '' HUP; " . s:Browsers[l:which][1] . " " . s:ShellEscape(l:file) . " &\""
			endif
		endif
	endif " }}}

	if (l:which ==? 'c') " {{{
		if l:new == 2
			BRCMESG Opening new Chrome tab...
			if has('win32') || has('win64') || has('win32unix')
				let l:command='start ' . s:Browsers[l:which][0] . ' ' . <SID>ShellEscape(l:file)
			else
				let l:command="sh -c \"trap '' HUP; " . s:Browsers[l:which][1] . " " . s:ShellEscape(l:file) . " &\""
			endif
		elseif l:new
			BRCMESG Opening new Chrome window...
			if has('win32') || has('win64') || has('win32unix')
				let l:command='start ' . s:Browsers[l:which][0] . ' ' . <SID>ShellEscape(l:file) . ' --new-window'
			else
				let l:command="sh -c \"trap '' HUP; " . s:Browsers[l:which][1] . " " . s:ShellEscape(l:file) . " --new-window &\""
			endif
		else
			BRCMESG Sending remote command to Chrome...
			if has('win32') || has('win64') || has('win32unix')
				let l:command='start ' . s:Browsers[l:which][0] . ' ' . <SID>ShellEscape(l:file)
			else
				let l:command="sh -c \"trap '' HUP; " . s:Browsers[l:which][1] . " " . s:ShellEscape(l:file) . " &\""
			endif
		endif
	endif " }}}

	if (l:which ==? 'f') " {{{
		if l:new == 2
			BRCMESG Opening new Firefox tab...
			if has('win32') || has('win64') || has('win32unix')
				let l:command='start ' . s:Browsers[l:which][0] . ' --new-tab ' . <SID>ShellEscape(l:file)
			else
				let l:command="sh -c \"trap '' HUP; " . s:Browsers[l:which][1] . " --new-tab " . s:ShellEscape(l:file) . " &\""
			endif
		elseif l:new
			BRCMESG Opening new Firefox window...
			if has('win32') || has('win64') || has('win32unix')
				let l:command='start ' . s:Browsers[l:which][0] . ' --new-window ' . <SID>ShellEscape(l:file)
			else
				let l:command="sh -c \"trap '' HUP; " . s:Browsers[l:which][1] . " --new-window " . s:ShellEscape(l:file) . " &\""
			endif
		else
			BRCMESG Sending remote command to Firefox...
			if has('win32') || has('win64') || has('win32unix')
				let l:command='start ' . s:Browsers[l:which][0] . ' ' . <SID>ShellEscape(l:file)
			else
				let l:command="sh -c \"trap '' HUP; " . s:Browsers[l:which][1] . " " . s:ShellEscape(l:file) . " &\""
			endif
		endif
	endif " }}}

	if exists('l:command')

		if has('win32unix')
			" Change "start" to "cygstart":
			let l:command='cyg' . l:command
		endif

		"echomsg l:command
		call system(l:command)

		"if has('unix') && v:shell_error
		if v:shell_error
			exe 'BRCERROR Command failed: ' . l:command
			return 0
		endif

		return 1
	endif

	BRCERROR Something went wrong, we should not ever get here...
	return 0
endfunction " }}}1

" vim: set ts=2 sw=2 ai nu tw=75 fo=croq2 fdm=marker fdc=4:
@


1.27
log
@- Issue a warning if the OS is not recognized
@
text
@d52 1
a52 1
" $Id: browser_launcher.vim,v 1.26 2020/02/01 03:50:34 Heptite Exp Heptite $
d55 1
a55 1
if v:version < 702
d67 1
a67 1
		return "'" . substitute(a:str, "'", "'\\\\''", 'g') . "'"
d102 1
a102 1
			let new = a:1
d104 1
a104 1
			let new = 0
d107 1
a107 1
		let file = expand('%:p')
d110 1
a110 1
		let use_AS = s:UseAppleScript()
d113 1
a113 1
		let as_msg = "This feature utilizes the built-in Graphic User " .
d120 3
a122 3
			if new != 0 && use_AS
				if new == 2
					let torn = 't'
d125 1
a125 1
					let torn = 'n'
d128 1
a128 1
				let script = '-e "tell application \"safari\"" ' .
d137 1
a137 1
				\ '-e ' . s:ShellEscape("set (URL of last tab) to \"" . file . "\"") . ' ' .
d141 1
a141 1
				let command = "/usr/bin/osascript " . script
d144 1
a144 1
				if new != 0
d146 1
a146 1
					exec 'BRCERROR ' . as_msg
d149 1
a149 1
				let command = "/usr/bin/open -a safari " . s:ShellEscape(file)
d154 2
a155 2
			if new != 0 && use_AS
				if new == 2
d157 1
a157 1
					let torn = 't'
d161 1
a161 1
					let torn = 'n'
d164 1
a164 1
				let script = '-e "tell application \"firefox\"" ' .
d168 1
a168 1
				\ '-e "keystroke \"' . torn . '\" using {command down}" ' .
d172 1
a172 1
				\ '-e ' . s:ShellEscape("keystroke \"" . file . "\" & return") . " " .
d177 1
a177 1
				let command = "/usr/bin/osascript " . script
d180 1
a180 1
				if new != 0
d182 1
a182 1
					exec 'BRCERROR ' . as_msg
d186 1
a186 1
				let command = "/usr/bin/open -a firefox " . s:ShellEscape(file)
d191 2
a192 2
			if new != 0 && use_AS
				if new == 2
d194 1
a194 1
					let torn = 't'
d198 1
a198 1
					let torn = 'n'
d201 1
a201 1
				let script = '-e "tell application \"Opera\"" ' .
d205 1
a205 1
				\ '-e "keystroke \"' . torn . '\" using {command down}" ' .
d209 1
a209 1
				\ '-e ' . s:ShellEscape("set URL of front document to \"" . file . "\"") . " " .
d212 1
a212 1
				let command = "/usr/bin/osascript " . script
d215 1
a215 1
				if new != 0
d217 1
a217 1
					exec 'BRCERROR ' . as_msg
d221 1
a221 1
				let command = "/usr/bin/open -a opera " . s:ShellEscape(file)
d228 1
a228 1
			let command = "/usr/bin/open " . s:ShellEscape(file)
d233 2
a234 2
			exe 'BRCMESG Opening ' . substitute(a:app, '^.', '\U&', '') . '...'
			let command = "open -a " . a:app . " " . s:ShellEscape(file)
d263 1
a263 1
			let s:Browsers[s:temp1][1] = substitute(s:temp3, "\n$", '', '')
d265 1
a265 1
			let s:BrowsersExist = substitute(s:BrowsersExist, s:temp1, '', 'g')
d269 1
a269 1
	"for [key, value] in items(s:Browsers)
d329 1
a329 1
	let err = 0
d334 2
a335 2
		let which = a:1
		let new = a:2
d337 1
a337 1
		let err = 1
d342 1
a342 1
	let file = 'file://' .
d344 1
a344 1
				\ substitute(system('cygpath -w ' . s:ShellEscape(expand('%:p'))), "\n$", '', '') :
d349 1
a349 1
		let file = a:3
d351 1
a351 1
		let err = 1
d354 1
a354 1
	if err
d356 1
a356 1
					\ . substitute(expand('<sfile>'), '^function ', '', '')
d360 2
a361 2
	if which ==? 'default'
		let which = strpart(s:BrowsersExist, 0, 1)
d364 2
a365 2
	if s:BrowsersExist !~? which
		if exists('s:Browsers[which]')
d367 1
a367 1
						\ . (type(s:Browsers[which][0]) == type([]) ? s:Browsers[which][0][0] : s:Browsers[which][0])
d370 1
a370 1
			exe 'BRCERROR Unknown browser ID: ' . which
d376 1
a376 1
	if has('unix') && (! strlen($DISPLAY) || which ==? 'l') " {{{
d379 2
a380 2
		if (has("gui_running") || new) && strlen($DISPLAY)
			let command='xterm -T Lynx -e lynx ' . s:ShellEscape(file) . ' &'
d383 1
a383 1
			execute "!lynx " . s:ShellEscape(file)
d392 1
a392 1
	if has('unix') && (which ==? 'w') " {{{
d395 2
a396 2
		if (has("gui_running") || new) && strlen($DISPLAY)
			let command='xterm -T w3m -e w3m ' . s:ShellEscape(file) . ' &'
d399 1
a399 1
			execute "!w3m " . s:ShellEscape(file)
d408 2
a409 2
	if (which ==? 'o') " {{{
		if new == 2
d412 1
a412 1
				let command='start ' . s:Browsers[which][0] . ' ' . <SID>ShellEscape(file)
d414 1
a414 1
				let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " " . s:ShellEscape(file) . " &\""
d416 1
a416 1
		elseif new
d419 1
a419 1
				let command='start ' . s:Browsers[which][0] . ' ' . <SID>ShellEscape(file) . ' --new-window'
d421 1
a421 1
				let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " " . s:ShellEscape(file) . " --new-window &\""
d426 1
a426 1
				let command='start ' . s:Browsers[which][0] . ' ' . <SID>ShellEscape(file)
d428 1
a428 1
				let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " " . s:ShellEscape(file) . " &\""
d433 2
a434 2
	if (which ==? 'c') " {{{
		if new == 2
d437 1
a437 1
				let command='start ' . s:Browsers[which][0] . ' ' . <SID>ShellEscape(file)
d439 1
a439 1
				let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " " . s:ShellEscape(file) . " &\""
d441 1
a441 1
		elseif new
d444 1
a444 1
				let command='start ' . s:Browsers[which][0] . ' ' . <SID>ShellEscape(file) . ' --new-window'
d446 1
a446 1
				let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " " . s:ShellEscape(file) . " --new-window &\""
d451 1
a451 1
				let command='start ' . s:Browsers[which][0] . ' ' . <SID>ShellEscape(file)
d453 1
a453 1
				let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " " . s:ShellEscape(file) . " &\""
d458 2
a459 2
	if (which ==? 'f') " {{{
		if new == 2
d462 1
a462 1
				let command='start ' . s:Browsers[which][0] . ' --new-tab ' . <SID>ShellEscape(file)
d464 1
a464 1
				let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " --new-tab " . s:ShellEscape(file) . " &\""
d466 1
a466 1
		elseif new
d469 1
a469 1
				let command='start ' . s:Browsers[which][0] . ' --new-window ' . <SID>ShellEscape(file)
d471 1
a471 1
				let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " --new-window " . s:ShellEscape(file) . " &\""
d476 1
a476 1
				let command='start ' . s:Browsers[which][0] . ' ' . <SID>ShellEscape(file)
d478 1
a478 1
				let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " " . s:ShellEscape(file) . " &\""
d487 1
a487 1
			let command='cyg' . command
d490 2
a491 2
		"echomsg command
		call system(command)
d495 1
a495 1
			exe 'BRCERROR Command failed: ' . command
@


1.26
log
@- Add support for Windows and Cygwin
@
text
@d52 1
a52 1
" $Id: browser_launcher.vim,v 1.25 2020/01/30 05:58:23 Heptite Exp Heptite $
d285 6
@


1.25
log
@Fix firefox command-lines
@
text
@d26 4
a29 3
" Windows:
"  None currently -- the HTML.vim script has mappings that runs system
"  commands directly to control the browsers.
d34 2
a35 2
"    Note: Various browsers such as galeon, nautilus, phoenix, &c use the
"    same HTML rendering engine as firefox, so supporting them isn't as
d38 1
a38 1
"  - Defaulting to lynx if the the GUI isn't available on Unix may be
a40 2
"  - Support for Windows (this exists directly in HTML.vim now).
"
d44 4
a47 2
"    so execution errors aren't actually seen when not issuing a command to
"    an already running browser.
d49 1
a49 1
"  * This code is a mess and mostly needs to be rethought.  Oh well.
d52 1
a52 1
" $Id: browser_launcher.vim,v 1.24 2020/01/28 02:19:26 Heptite Exp Heptite $
d240 3
a242 1
elseif has('unix') " {{{1
d275 1
a275 1
elseif has('win32') || has('win64')  " {{{1
d277 8
a284 2
	BRCERROR Currently there is no browser control support for Windows --
	BRCERROR support is built directly into HTML.vim.
a287 1

d295 1
a295 1
"  :call LaunchBrowser({[fcolw] | default},{[012]},[url])
d304 1
d334 7
a340 1
	let file = 'file://' . expand('%:p')
d386 1
a386 1
	if (which ==? 'w') " {{{
d405 5
a409 1
			let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " " . s:ShellEscape(file) . " &\""
d412 5
a416 1
			let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " " . s:ShellEscape(file) . " --new-window &\""
d419 5
a423 1
			let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " " . s:ShellEscape(file) . " &\""
d430 5
a434 1
			let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " " . s:ShellEscape(file) . " &\""
d437 5
a441 1
			let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " " . s:ShellEscape(file) . " --new-window &\""
d444 5
a448 1
			let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " " . s:ShellEscape(file) . " &\""
d455 5
a459 1
			let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " --new-tab " . s:ShellEscape(file) . " &\""
d462 5
a466 1
			let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " --new-window " . s:ShellEscape(file) . " &\""
d469 5
a473 1
			let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " " . s:ShellEscape(file) . " &\""
d479 3
a481 3
		if ! has('unix')
			" Strip out shell magic if necessary
			let command = substitute(command, "sh -c \"trap '' HUP; \\(.\\+\\) &\"", '\1', '')
d484 1
d487 2
a488 1
		if has('unix') && v:shell_error
a495 1
	" Should never get here...if we do, something went wrong:
@


1.24
log
@Minor changes
@
text
@d51 1
a51 1
" $Id$
d416 1
a416 1
			let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " -new-tab " . s:ShellEscape(file) . " &\""
d419 1
a419 1
			let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " -new-window " . s:ShellEscape(file) . " &\""
@


1.23
log
@- Stripped out support for obsolete browsers
- Simplified some of the code
@
text
@d12 3
a14 1
"    (This can also be Iceweasel for Debian installs.)
d28 1
a28 1
"  commands directly to control the default browser.
d32 1
a32 3
"  - Support more browsers?
"    + links  (text browser)
"
d40 1
a40 1
"  - Support for Windows (this sortof exists in HTML.vim now).
d51 2
d72 3
a74 4

	"BRCERROR Currently there's no browser control support for Macintosh.
	"BRCERROR See ":help html-author-notes"

d244 5
a248 5
	let s:Browsers['f'] = [['firefox', 'iceweasel'],  '']
	let s:Browsers['c'] = ['google-chrome',  '']
	let s:Browsers['o'] = ['opera',          '']
	let s:Browsers['l'] = ['lynx',           '']
	let s:Browsers['w'] = ['w3m',            '']
d275 1
a275 2
	BRCERROR support for the default system browser is built into HTML.vim.
	BRCERROR See ":help html-author-notes"
d280 1
a280 1
if exists("*LaunchBrowser") || exists("*OpenInMacApp")
@


1.22
log
@Determining the firefox remote command wasn't working properly (Fr. Robert Bower)
@
text
@d5 1
a5 1
" Copyright ????-2010 Christian J. Robinson <heptite@@gmail.com>
d11 1
a11 1
"  - Firefox  (remote [new window / new tab] / launch)  [1]
a12 2
"  - Mozilla  (remote [new window / new tab] / launch)  [1]
"  - Netscape (remote [new window] / launch)            [1]
d26 1
a26 1
"  commands directly.
a29 3
"  - Phase out support for "mozilla" and "netscape" since they're so old
"    now that nobody should be using them.
"
d34 2
a35 2
"    same HTML rendering engine as mozilla/firefox, so supporting them
"    isn't as important.
d40 1
a40 1
"  - Support for Windows (sortof exists in HTML.vim now).
d43 1
a43 4
"  * [1] On Unix, the remote control for firefox/mozilla/netscape will
"    probably default to firefox if more than one is running.
"
"  * On Unix, Since the commands to start the browsers are run in the
d52 1
a52 1
if v:version < 700
d242 1
a242 1
	let s:BrowsersExist = 'fcmnolw'
a244 2
	let s:Browsers['m'] = ['mozilla',        '']
	let s:Browsers['n'] = ['netscape',       '']
a270 19
	let s:NetscapeRemoteCmd = substitute(system("which mozilla-xremote-client"), "\n$", '', '')
	if v:shell_error != 0
		let s:NetscapeRemoteCmd = substitute(system("which netscape-remote"), "\n$", '', '')
	endif
	if v:shell_error != 0
		if s:Browsers['f'][1] != ''
			let s:NetscapeRemoteCmd = s:Browsers['f'][1]
		elseif s:Browsers['m'][1] != ''
			let s:NetscapeRemoteCmd = s:Browsers['m'][1]
		elseif s:Browsers['n'][1] != ''
			let s:NetscapeRemoteCmd = s:Browsers['n'][1]
		else
			"BRCERROR Can't set up remote-control preview code.
			"BRCERROR (netscape-remote/firefox/mozilla/netscape not installed?)
			"finish
			let s:NetscapeRemoteCmd = 'false'
		endif
	endif

d273 2
a274 1
	BRCERROR Currently there's no browser control support for Windows.
a275 12
	
	"let s:Browsers = {}
	"let s:BrowsersExist = ''

	"if filereadable('C:\Program Files\Mozilla Firefox\firefox.exe')
	"	let s:Browsers['f'] = ['firefox', '"C:\Program Files\Mozilla Firefox\firefox.exe"']
	"	let s:BrowsersExist .= 'f'
	"endif

	"if s:Browsers['f'][1] != ''
	"	let s:NetscapeRemoteCmd = s:Browsers['f'][1]
	"endif
d287 1
a287 1
"  :call LaunchBrowser({[fmncolw] | default},{[012]},[url])
a289 2
"      m - Mozilla
"      n - Netscape
d390 1
a390 1
			let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " -remote 'openURL('" . s:ShellEscape(file) . "',new-page)' &\""
d393 1
a393 1
			let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " -remote 'openURL('" . s:ShellEscape(file) . "',new-window)' &\""
a412 21
	" Find running instances of firefox/mozilla/netscape:  {{{
	if has('unix') && (which =~? '^[fmn]$')
		let FirefoxRunning = 0
		let MozillaRunning = 0
		let NetscapeRunning = 0
		let windows = system("xwininfo -root -children | egrep \"[Ff]irefox|[Cc]hrome|[Nn]etscape|[Mm]ozilla\"; return 0")

		if windows =~? 'firefox'
			let FirefoxRunning = 1
		endif
		if windows =~? 'mozilla'
			let MozillaRunning = 1
		endif
		if windows =~? 'netscape'
			let NetscapeRunning = 1
		endif
	else
		" ... Make some assumptions:
		"let FirefoxRunning = 1
	endif  " }}}

d414 6
a419 3
		if ! FirefoxRunning
			BRCMESG Launching firefox, please wait...
			let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " " . s:ShellEscape(file) . " &\""
d421 1
a421 16
			if new == 2
				BRCMESG Opening new Firefox tab...
				let command=s:NetscapeRemoteCmd . " -remote 'openURL('" . s:ShellEscape(file) . "',new-tab)'"
			elseif new
				BRCMESG Opening new Firefox window...
				let command=s:NetscapeRemoteCmd . " -remote 'openURL('" . s:ShellEscape(file) . "',new-window)'"
			else
				BRCMESG Sending remote command to Firefox...
				let command=s:NetscapeRemoteCmd . " -remote 'openURL('" . s:ShellEscape(file) . "')'"
			endif
		endif
	endif " }}}

	if (which ==? 'm') " {{{
		if ! MozillaRunning
			BRCMESG Launching mozilla, please wait...
a422 26
		else
			if new == 2
				BRCMESG Opening new Mozilla tab...
				let command=s:NetscapeRemoteCmd . " -remote 'openURL('" . s:ShellEscape(file) . "',new-tab)'"
			elseif new
				BRCMESG Opening new Mozilla window...
				let command=s:NetscapeRemoteCmd . " -remote 'openURL('" . s:ShellEscape(file) . "',new-window)'"
			else
				BRCMESG Sending remote command to Mozilla...
				let command=s:NetscapeRemoteCmd . " -remote 'openURL('" . s:ShellEscape(file) . "')'"
			endif
		endif
	endif " }}}

	if (which ==? 'n') " {{{
		if ! NetscapeRunning
			BRCMESG Launching netscape, please wait...
			let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " " . s:ShellEscape(file) . " &\""
		else
			if new
				BRCMESG Opening new Netscape window...
				let command=s:NetscapeRemoteCmd . " -remote 'openURL('" . s:ShellEscape(file) . "',new-window)'"
			else
				BRCMESG Sending remote command to Netscape...
				let command=s:NetscapeRemoteCmd . " -remote 'openURL('" . s:ShellEscape(file) . "')'"
			endif
a427 9
		if l:command =~# '^false'
			BRCERROR Remote command is impossible, probably because the browser you are trying to control is not installed.
			return 0
		endif

		if command =~ 'mozilla-xremote-client'
			let command = substitute(command, '-remote', '-a ' . s:Browsers[which][0], '')
		endif

d429 1
a430 1
			let command = substitute(command, '"\(openURL(.\+)\)"', '\1', '')
d444 1
a444 1
	BRCERROR Something went wrong, shouln't ever get here...
@


1.21
log
@Google Chrome handling code didn't work
@
text
@d251 7
a257 7
	let s:Browsers['f'] = [['firefox', 'iceweasel'],  0]
	let s:Browsers['c'] = ['google-chrome',  0]
	let s:Browsers['m'] = ['mozilla',        0]
	let s:Browsers['n'] = ['netscape',       0]
	let s:Browsers['o'] = ['opera',          0]
	let s:Browsers['l'] = ['lynx',           0]
	let s:Browsers['w'] = ['w3m',            0]
d286 1
a286 1
		if s:Browsers['f'][1] != 0
d288 1
a288 1
		elseif s:Browsers['m'][1] != 0
d290 1
a290 1
		elseif s:Browsers['n'][1] != 0
d530 1
a530 1
			BERROR Remote command is impossible, probably because the browser you are trying to control is not installed.
@


1.20
log
@Fr. Robert Bower added support for Google Chrome on Unix/Linux
@
text
@d64 1
d103 1
a103 1
			exec 'BRCERROR ' . a:app . " not found."
a287 2
		elseif s:Browsers['c'][1] != 0
			let s:NetscapeRemoteCmd = s:Browsers['c'][1]
d327 1
a327 1
"  :call LaunchBrowser({[ncolmf]},{[012]},[url])
d332 1
d442 15
a456 2
	" Find running instances of firefox/chrome/mozilla/netscape:  {{{
	if has('unix')
a459 1

a464 3
		if windows =~? 'chrome'
			let GogleChromeRunning = 1
		endif
a493 18
	if (which ==? 'c') " {{{
		if ! GoogleChromeRunning
			BRCMESG Launching Chrome, please wait...
			let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " " . s:ShellEscape(file) . " &\""
		else
			if new == 2
				BRCMESG Opening new Chrome tab...
				let command=s:NetscapeRemoteCmd . " -remote 'openURL('" . s:ShellEscape(file) . "',new-tab)'"
			elseif new
				BRCMESG Opening new Chrome window...
				let command=s:NetscapeRemoteCmd . " -remote 'openURL('" . s:ShellEscape(file) . "',new-window)'"
			else
				BRCMESG Sending remote command to Chrome...
				let command=s:NetscapeRemoteCmd . " -remote 'openURL('" . s:ShellEscape(file) . "')'"
			endif
		endif
	endif " }}}

d530 1
a530 1
			BERROR Remote command is impossible, probably because the browser you are trying to control does not exist.
@


1.19
log
@Support alternate names for browser--mostly to support iceweasel as
 an alternate name to firefox for Debian installs
@
text
@d249 1
a249 2
	let s:BrowsersExist = 'fmnolw'

d251 6
a256 5
	let s:Browsers['m'] = ['mozilla',  0]
	let s:Browsers['n'] = ['netscape', 0]
	let s:Browsers['o'] = ['opera',    0]
	let s:Browsers['l'] = ['lynx',     0]
	let s:Browsers['w'] = ['w3m',      0]
d287 2
d328 1
a328 1
"  :call LaunchBrowser({[nolmf]},{[012]},[url])
d442 1
a442 1
	" Find running instances firefox/mozilla/netscape:  {{{
d448 1
a448 1
		let windows = system("xwininfo -root -children | egrep \"[Ff]irefox|[Nn]etscape|[Mm]ozilla\"; return 0")
d453 3
d485 18
@


1.18
log
@Minor patches by Israel
@
text
@d5 1
a5 1
" Copyright ????-2009 Christian J. Robinson <heptite@@gmail.com>
d12 1
d32 3
d45 1
a45 1
"  - Support for Windows.
d56 1
a56 1
"  * The code is a mess and mostly needs to be rethought.  Oh well.
d64 2
a65 2
command! -nargs=+ BERROR :echohl ErrorMsg | echomsg <q-args> | echohl None
command! -nargs=+ BMESG :echohl Todo | echo <q-args> | echohl None
d78 2
a79 2
	"BERROR Currently there's no browser control support for Macintosh.
	"BERROR See ":help html-author-notes"
d102 1
a102 1
			exec 'BERROR ' . a:app . " not found."
d128 1
a128 1
					BMESG Opening file in new Safari tab...
d131 1
a131 1
					BMESG Opening file in new Safari window...
d151 1
a151 1
					exec 'BERROR ' . as_msg
d153 1
a153 1
				BMESG Opening file in Safari...
d163 1
a163 1
					BMESG Opening file in new Firefox tab...
d167 1
a167 1
					BMESG Opening file in new Firefox window...
d187 1
a187 1
					exec 'BERROR ' . as_msg
d190 1
a190 1
				BMESG Opening file in Firefox...
d200 1
a200 1
					BMESG Opening file in new Opera tab...
d204 1
a204 1
					BMESG Opening file in new Opera window...
d222 1
a222 1
					exec 'BERROR ' . as_msg
d225 1
a225 1
				BMESG Opening file in Opera...
d232 1
a232 1
			BMESG Opening file in default browser...
d238 1
a238 1
			exe 'BMESG Opening ' . substitute(a:app, '^.', '\U&', '') . '...'
d248 1
d251 1
a251 1
	let s:Browsers['f'] = ['firefox',  0]
d259 7
a265 1
		let s:temp2 = system("which " . s:Browsers[s:temp1][0])
d267 2
a268 1
			let s:Browsers[s:temp1][1] = substitute(s:temp2, "\n$", '', '')
d274 5
a278 1
	unlet s:temp1 s:temp2
d292 2
a293 2
			"BERROR Can't set up remote-control preview code.
			"BERROR (netscape-remote/firefox/mozilla/netscape not installed?)
d301 2
a302 2
	BERROR Currently there's no browser control support for Windows.
	BERROR See ":help html-author-notes"
d374 1
a374 1
		exe 'BERROR E119: Wrong number of arguments for function: '
d385 3
a387 1
			exe 'BERROR ' . s:Browsers[which][0] . ' not found'
d389 1
a389 1
			exe 'BERROR Unknown browser ID: ' . which
d396 1
a396 1
		BMESG Launching lynx...
d405 1
a405 1
				BERROR Unable to launch lynx.
d412 1
a412 1
		BMESG Launching w3m...
d421 1
a421 1
				BERROR Unable to launch w3m.
d429 1
a429 1
			BMESG Opening new Opera tab...
d432 1
a432 1
			BMESG Opening new Opera window...
d435 1
a435 1
			BMESG Sending remote command to Opera...
d464 1
a464 1
			BMESG Launching firefox, please wait...
d468 1
a468 1
				BMESG Opening new Firefox tab...
d471 1
a471 1
				BMESG Opening new Firefox window...
d474 1
a474 1
				BMESG Sending remote command to Firefox...
d482 1
a482 1
			BMESG Launching mozilla, please wait...
d486 1
a486 1
				BMESG Opening new Mozilla tab...
d489 1
a489 1
				BMESG Opening new Mozilla window...
d492 1
a492 1
				BMESG Sending remote command to Mozilla...
d500 1
a500 1
			BMESG Launching netscape, please wait...
d504 1
a504 1
				BMESG Opening new Netscape window...
d507 1
a507 1
				BMESG Sending remote command to Netscape...
d515 5
d532 1
a532 1
			exe 'BERROR Command failed: ' . command
d540 1
a540 1
	BERROR Something went wrong, shouln't ever get here...
@


1.17
log
@Hopefully support for MacOS works now -- code provided by
Israel Chauca Fuentes
@
text
@d82 1
a82 1
		call system("/usr/bin/osascript -e 'get id of application \"" .
d92 2
a93 2
			 \ . "'tell application \"System Events\" to set UI_enabled " .
			 \ . "to UI elements enabled' 2>/dev/null") ==? "true\n" ? 1 : 0
d97 1
a97 1
		if (! s:MacAppExists(a:app))
d170 1
a170 1
				\ '-e "delay 0.3" ' .
@


1.16
log
@- Started implementing browser controls for MacOS
@
text
@d5 1
a5 1
" Copyright ????-2008 Christian J. Robinson <heptite@@gmail.com>
d10 1
d19 9
d31 2
a32 2
"  Support more browsers?
"   - links  (text browser)
d34 3
a36 1
"  Defaulting to lynx if the the GUI isn't available may be undesirable.
d38 2
a39 3
"  Note: Various browsers such as galeon, nautilus, phoenix, &c use the
"        same HTML rendering engine as mozilla/firefox, so supporting them
"        isn't as important.
d41 1
a41 3
"  BUGS:
"  * [1] The remote control for firefox/mozilla/netscape will probably
"    default to firefox if more than one is running.
d43 3
a45 4
"  * Since the commands to start the browsers are run in the backgorund
"    there's no way to actually get v:shell_error, so execution errors
"    aren't actually seen when not issuing a command to an already running
"    browser.
d47 6
a52 1
"  * The code is a mess.  Oh well.
d63 114
a176 1
" Attempt to detect which browsers are installed:  {{{1
d178 64
a241 1
if has('unix')
d283 1
a283 1
elseif has('win32') || has('win64')
d300 1
a300 8
elseif has('mac') || has('macunix')

	"BERROR Currently there's no browser control support for Macintosh.
	"BERROR See ":help html-author-notes"


	" The following code is provided by Israel Chauca Fuentes
	" <israelvarios()fastmail!fm> and modified by me.
a301 58
	function! OpenInMacApp(app, ...) " {{{
		if a:0 >= 1
			let new = a:1
		else
			let new = 0
		endif

		let file = expand('%:p')

		if (app ==? 'opera') " {{{
			if new == 2
				BMESG Opening new Opera tab...
				let command="open -a " . a:app . "-remote 'openURL('" . file . "',new-page)' &\""
			elseif new
				BMESG Opening new Opera window...
				let command="open -a " . a:app . "-remote 'openURL('" . file . "',new-window)' &\""
			else
				BMESG Sending remote command to Opera...
				let command="open -a " . a:app . system("open " . file)
			endif
		endif " }}}

		if (app ==? 'firefox') " {{{
			if new == 2
				BMESG Opening new Firefox tab...
				let command="open -a " . a:app . "-remote 'openURL('" . file . "',new-tab)' &\""
			elseif new
				BMESG Opening new Firefox window...
				let command="open -a " . a:app . "-remote 'openURL('" . file . "',new-window)' &\""
			else
				BMESG Sending remote command to Firefox...
				let command="open -a " . a:app . system("open " . file)
			endif
		endif " }}}

		"if (app ==? 'safari') " {{{
		"	BMESG Opening Safari...
		"	let command = "open -a " . a:app . file
		"endif " }}}

		if (app ==? 'default')
			BMESG Opening default browser...
			let command = "open " . file
		endif

		if (! exists('command'))
			exe 'BMESG Opening ' . substitute(a:app, '^.', '\U&', '') . '...'
			let command = "open -a " . a:app . file
		endif

		let errmsg = system(command)

		"if something goes wrong, let the user know:
		if errmsg != "" | echoerr errmsg | endif
	endfunction " }}}
endif

" }}}1
a306 8
function! s:ShellEscape(str)
	if exists('*shellescape')
		return shellescape(a:str)
	else
		return "'" . substitute(a:str, "'", "'\\\\''", 'g') . "'"
	endif
endfunction

a346 1
		let new = 0
@


1.15
log
@Update email address
@
text
@d113 2
a114 2
	BERROR Currently there's no browser control support for Macintosh.
	BERROR See ":help html-author-notes"
d116 59
d179 1
a179 1
if exists("*LaunchBrowser")
d231 1
d406 1
a406 1
" vim: set ts=2 sw=2 ai nu tw=75 fo=croq2 fdm=marker fdc=3:
@


1.14
log
@Try to safely escape shell commands
@
text
@d5 1
a5 1
" Copyright ????-2008 Christian J. Robinson <infynity@@onewest.net>
@


1.13
log
@(Failed) attempt at Windows compatibility
@
text
@d124 8
d206 1
a206 1
			let command='xterm -T Lynx -e lynx ' . file . ' &'
d209 1
a209 1
			execute "!lynx " . file
d222 1
a222 1
			let command='xterm -T w3m -e w3m ' . file . ' &'
d225 1
a225 1
			execute "!w3m " . file
d237 1
a237 1
			let command="sh -c \"trap '' HUP; " . s:Browsers['which'][1] . " -remote 'openURL(" . file . ",new-page)' &\""
d240 1
a240 1
			let command="sh -c \"trap '' HUP; " . s:Browsers['which'][1] . " -remote 'openURL(" . file . ",new-window)' &\""
d243 1
a243 1
			let command="sh -c \"trap '' HUP; " . s:Browsers['which'][1] . " " . file . " &\""
d272 1
a272 1
			let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " " . file . " &\""
d276 1
a276 1
				let command=s:NetscapeRemoteCmd . " -remote \"openURL(" . file . ",new-tab)\""
d279 1
a279 1
				let command=s:NetscapeRemoteCmd . " -remote \"openURL(" . file . ",new-window)\""
d282 1
a282 1
				let command=s:NetscapeRemoteCmd . " -remote \"openURL(" . file . ")\""
d290 1
a290 1
			let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " " . file . " &\""
d294 1
a294 1
				let command=s:NetscapeRemoteCmd . " -remote \"openURL(" . file . ",new-tab)\""
d297 1
a297 1
				let command=s:NetscapeRemoteCmd . " -remote \"openURL(" . file . ",new-window)\""
d300 1
a300 1
				let command=s:NetscapeRemoteCmd . " -remote \"openURL(" . file . ")\""
d308 1
a308 1
			let command="sh -c \"trap '' HUP; " . s:Browsers[which][1] . " " . file . " &\""
d312 1
a312 1
				let command=s:NetscapeRemoteCmd . " -remote \"openURL(" . file . ",new-window)\""
d315 1
a315 1
				let command=s:NetscapeRemoteCmd . " -remote \"openURL(" . file . ")\""
d322 1
a322 1
		if s:NetscapeRemoteCmd =~ 'mozilla-xremote-client'
@


1.12
log
@Clean up the code
Prepare for the possibility of using LaunchBrowser() under Windows/Mac
@
text
@d75 1
a75 1
	let s:NetscapeRemoteCmd = substitute(system("which netscape-remote"), "\n$", '', '')
d77 4
a80 1
		if s:Browsers['f'][1]
d82 1
a82 1
		elseif s:Browsers['m'][1]
d84 1
a84 1
		elseif s:Browsers['n'][1]
d98 12
d229 1
a229 1
			let command="sh -c \"trap '' HUP; opera -remote 'openURL(" . file . ",new-page)' &\""
d232 1
a232 1
			let command="sh -c \"trap '' HUP; opera -remote 'openURL(" . file . ",new-window)' &\""
d235 1
a235 1
			let command="sh -c \"trap '' HUP; opera " . file . " &\""
d241 4
d246 1
a248 2
		else
			let FirefoxRunning = 0
a251 2
		else
			let MozillaRunning = 0
a254 2
		else
			let NetscapeRunning = 0
d256 3
d264 1
a264 1
			let command="sh -c \"trap '' HUP; firefox " . file . " &\""
d267 1
a267 1
				BMESG Firefox is running, opening new tab...
d270 1
a270 1
				BMESG Firefox is running, opening new window...
d273 1
a273 1
				BMESG Firefox is running, issuing remote command...
d282 1
a282 1
			let command="sh -c \"trap '' HUP; mozilla " . file . " &\""
d285 1
a285 1
				BMESG Mozilla is running, opening new tab...
d288 1
a288 1
				BMESG Mozilla is running, opening new window...
d291 1
a291 1
				BMESG Mozilla is running, issuing remote command...
d300 1
a300 1
			let command="sh -c \"trap '' HUP; netscape " . file . " &\""
d303 1
a303 1
				BMESG Netscape is running, opening new window...
d306 1
a306 1
				BMESG Netscape is running, issuing remote command...
d313 10
d325 1
a325 1
		if v:shell_error
@


1.11
log
@BrowserLauncher() can accept an URL as an optional third argument
@
text
@d3 5
a7 1
" Vim script to launch/control browsers.
d27 2
a28 3
"  same HTML rendering engine as mozilla/firefox, so supporting them isn't
"  as important.
"   
d43 8
d52 22
a73 37
let s:BrowsersExist = ''
let s:FirefoxPath = system("which firefox")
if v:shell_error == 0
	let s:BrowsersExist = s:BrowsersExist . 'f'
else
	unlet s:FirefoxPath
endif
let s:MozillaPath = system("which mozilla")
if v:shell_error == 0
	let s:BrowsersExist = s:BrowsersExist . 'm'
else
	unlet s:MozillaPath
endif
let s:NetscapePath = system("which netscape")
if v:shell_error == 0
	let s:BrowsersExist = s:BrowsersExist . 'n'
else
	unlet s:NetscapePath
endif
let s:OperaPath = system("which opera")
if v:shell_error == 0
	let s:BrowsersExist = s:BrowsersExist . 'o'
else
	unlet s:OperaPath
endif
let s:LynxPath = system("which lynx")
if v:shell_error == 0
	let s:BrowsersExist = s:BrowsersExist . 'l'
else
	unlet s:LynxPath
endif
let s:w3mPath = system("which w3m")
if v:shell_error == 0
	let s:BrowsersExist = s:BrowsersExist . 'w'
else
	unlet s:w3mPath
endif
d75 14
a88 14
let s:NetscapeRemoteCmd = system("which netscape-remote")
if v:shell_error != 0
	if exists('s:FirefoxPath')
		let s:NetscapeRemoteCmd = s:FirefoxPath
	elseif exists('s:MozillaPath')
		let s:NetscapeRemoteCmd = s:MozillaPath
	elseif exists('s:NetscapePath')
		let s:NetscapeRemoteCmd = s:NetscapePath
	else
		"echohl ErrorMsg
		"echomsg "Can't set up remote-control preview code.\n(netscape-remote/firefox/mozilla/netscape not installed?)"
		"echohl None
		"finish
		let s:NetscapeRemoteCmd = 'false'
d90 11
a101 1
let s:NetscapeRemoteCmd = substitute(s:NetscapeRemoteCmd, "\n$", "", "")
d103 1
d109 2
a110 1

d122 1
d128 1
d151 1
a151 1
	let file = 'file://' . expand("%:p")
d160 2
a161 3
		echohl ErrorMsg
		echomsg 'E119: Wrong number of arguments for function: LaunchBrowser'
		echohl None
d169 6
a174 1
	if ((! strlen($DISPLAY)) || which ==? 'l' )
d176 2
a177 4
		if s:BrowsersExist !~? 'l'
			echohl ErrorMsg | echomsg "Lynx isn't found in $PATH." | echohl None
			return 0
		endif
d179 2
a180 1
		echohl Todo | echo "Launching lynx..." | echohl None
d183 1
a183 6
			call system("xterm -T Lynx -e lynx " . file . " &")

			if shell_error
				echohl ErrorMsg | echo "Unable to launch lynx in an xterm." | echohl None
				return 0
			endif
d188 2
a189 2
			if shell_error
				echohl ErrorMsg | echo "Unable to launch lynx." | echohl None
d193 1
d195 2
a196 12
		return 1
	endif


	if (which ==? 'w')

		if s:BrowsersExist !~? 'w'
			echohl ErrorMsg | echomsg "w3m isn't found in $PATH." | echohl None
			return 0
		endif

		echohl Todo | echo "Launching w3m..." | echohl None
d199 1
a199 6
			call system("xterm -T w3m -e w3m " . file . " &")

			if shell_error
				echohl ErrorMsg | echo "Unable to launch w3m in an xterm." | echohl None
				return 0
			endif
d204 2
a205 2
			if shell_error
				echohl ErrorMsg | echo "Unable to launch w3m." | echohl None
d209 1
d211 1
a211 10
		return 1
	endif

	if (which ==? 'o')

		if s:BrowsersExist !~? 'o'
			echohl ErrorMsg | echomsg "Opera isn't found in $PATH." | echohl None
			return 0
		endif

d213 2
a214 7
			echohl Todo | echo "Opening new Opera tab..." | echohl None
			call system("sh -c \"trap '' HUP; opera -remote 'openURL(" . file . ",new-page)' &\"")

			if shell_error
				echohl ErrorMsg | echo "Unable to issue remote command." | echohl None
				return 0
			endif
d216 7
a222 2
			echohl Todo | echo "Opening new Opera window..." | echohl None
			call system("sh -c \"trap '' HUP; opera -remote 'openURL(" . file . ",new-window)' &\"")
d224 10
a233 4
			if shell_error
				echohl ErrorMsg | echo "Unable to issue remote command." | echohl None
				return 0
			endif
d235 1
a235 7
			echohl Todo | echo "Sending remote command to Opera..." | echohl None
			call system("sh -c \"trap '' HUP; opera " . file . " &\"")

			if shell_error
				echohl ErrorMsg | echo "Unable to issue remote command." | echohl None
				return 0
			endif
d237 4
a240 26

		return 1
	endif

	let windows = system("xwininfo -root -children | egrep \"[Ff]irefox|[Nn]etscape|[Mm]ozilla\"; return 0")
	if windows =~? 'firefox'
		let FirefoxRunning = 1
	else
		let FirefoxRunning = 0
	endif
	if windows =~? 'mozilla'
		let MozillaRunning = 1
	else
		let MozillaRunning = 0
	endif
	if windows =~? 'netscape'
		let NetscapeRunning = 1
	else
		let NetscapeRunning = 0
	endif

	if (which ==? 'f')

		if s:BrowsersExist !~? 'f'
			echohl ErrorMsg | echomsg "Firefox isn't found in $PATH." | echohl None
			return 0
d242 1
d244 1
d246 2
a247 7
			echohl Todo | echo "Launching firefox, please wait..." | echohl None
			call system("sh -c \"trap '' HUP; firefox " . file . " &\"")

			if shell_error
				echohl ErrorMsg | echo "Unable to launch firefox." | echohl None
				return 0
			endif
d250 2
a251 7
				echohl Todo | echo "Firefox is running, opening new tab..." | echohl None
				call system(s:NetscapeRemoteCmd . " -remote \"openURL(" . file . ",new-tab)\"")

				if shell_error
					echohl ErrorMsg | echo "Unable to issue remote command." | echohl None
					return 0
				endif
d253 2
a254 7
				echohl Todo | echo "Firefox is running, opening new window..." | echohl None
				call system(s:NetscapeRemoteCmd . " -remote \"openURL(" . file . ",new-window)\"")

				if shell_error
					echohl ErrorMsg | echo "Unable to issue remote command." | echohl None
					return 0
				endif
d256 2
a257 7
				echohl Todo | echo "Firefox is running, issuing remote command..." | echohl None
				call system(s:NetscapeRemoteCmd . " -remote \"openURL(" . file . ")\"")

				if shell_error
					echohl ErrorMsg | echo "Unable to issue remote command." | echohl None
					return 0
				endif
d260 1
d262 1
a262 10
		return 1
	endif

	if (which ==? 'm')

		if s:BrowsersExist !~? 'm'
			echohl ErrorMsg | echomsg "Mozilla isn't found in $PATH." | echohl None
			return 0
		endif

d264 2
a265 7
			echohl Todo | echo "Launching mozilla, please wait..." | echohl None
			call system("sh -c \"trap '' HUP; mozilla " . file . " &\"")

			if shell_error
				echohl ErrorMsg | echo "Unable to launch mozilla." | echohl None
				return 0
			endif
d268 2
a269 7
				echohl Todo | echo "Mozilla is running, opening new tab..." | echohl None
				call system(s:NetscapeRemoteCmd . " -remote \"openURL(" . file . ",new-tab)\"")

				if shell_error
					echohl ErrorMsg | echo "Unable to issue remote command." | echohl None
					return 0
				endif
d271 2
a272 7
				echohl Todo | echo "Mozilla is running, opening new window..." | echohl None
				call system(s:NetscapeRemoteCmd . " -remote \"openURL(" . file . ",new-window)\"")

				if shell_error
					echohl ErrorMsg | echo "Unable to issue remote command." | echohl None
					return 0
				endif
d274 2
a275 7
				echohl Todo | echo "Mozilla is running, issuing remote command..." | echohl None
				call system(s:NetscapeRemoteCmd . " -remote \"openURL(" . file . ")\"")

				if shell_error
					echohl ErrorMsg | echo "Unable to issue remote command." | echohl None
					return 0
				endif
d278 1
d280 1
a280 10
		return 1
	endif

	if (which ==? 'n')

		if s:BrowsersExist !~? 'n'
			echohl ErrorMsg | echomsg "Netscape isn't found in $PATH." | echohl None
			return 0
		endif

d282 2
a283 7
			echohl Todo | echo "Launching netscape, please wait..." | echohl None
			call system("sh -c \"trap '' HUP; netscape " . file . " &\"")

			if shell_error
				echohl ErrorMsg | echo "Unable to launch netscape." | echohl None
				return 0
			endif
d286 8
a293 2
				echohl Todo | echo "Netscape is running, opening new window..." | echohl None
				call system(s:NetscapeRemoteCmd . " -remote \"openURL(" . file . ",new-window)\"")
d295 2
a296 7
				if shell_error
					echohl ErrorMsg | echo "Unable to issue remote command." | echohl None
					return 0
				endif
			else
				echohl Todo | echo "Netscape is running, issuing remote command..." | echohl None
				call system(s:NetscapeRemoteCmd . " -remote \"openURL(" . file . ")\"")
d298 3
a300 5
				if shell_error
					echohl ErrorMsg | echo "Unable to issue remote command." | echohl None
					return 0
				endif
			endif
d306 2
a307 1
	echohl ErrorMsg | echo "Unknown browser ID." | echohl None
d309 1
a309 1
endfunction
d311 1
a311 1
" vim: set ts=2 sw=2 ai nu tw=75 fo=croq2:
@


1.10
log
@Add support for w3m text browser
@
text
@a40 4
if exists("*LaunchBrowser")
	finish
endif

d98 5
d104 1
a104 1
"  :call LaunchBrowser({[nolmf]},{[012]})
d112 2
d119 2
d130 2
d134 1
a134 1
	elseif a:0 == 2
d138 12
d156 3
a158 1
	let file = expand("%:p")
d228 1
a228 1
			call system("sh -c \"trap '' HUP; opera -remote 'openURL(file://" . file . ",new-page)' &\"")
d236 1
a236 1
			call system("sh -c \"trap '' HUP; opera -remote 'openURL(file://" . file . ",new-window)' &\"")
d290 1
a290 1
				call system(s:NetscapeRemoteCmd . " -remote \"openURL(file://" . file . ",new-tab)\"")
d298 1
a298 1
				call system(s:NetscapeRemoteCmd . " -remote \"openURL(file://" . file . ",new-window)\"")
d306 1
a306 1
				call system(s:NetscapeRemoteCmd . " -remote \"openURL(file://" . file . ")\"")
d336 1
a336 1
				call system(s:NetscapeRemoteCmd . " -remote \"openURL(file://" . file . ",new-tab)\"")
d344 1
a344 1
				call system(s:NetscapeRemoteCmd . " -remote \"openURL(file://" . file . ",new-window)\"")
d352 1
a352 1
				call system(s:NetscapeRemoteCmd . " -remote \"openURL(file://" . file . ")\"")
d382 1
a382 1
				call system(s:NetscapeRemoteCmd . " -remote \"openURL(file://" . file . ",new-window)\"")
d390 1
a390 1
				call system(s:NetscapeRemoteCmd . " -remote \"openURL(file://" . file . ")\"")
@


1.9
log
@Bug in detecting the remote command
@
text
@d12 2
a18 1
"   - w3m    (text browser)
d20 1
a20 2
"  If I support multiple text browsers, defaulting to lynx if the the GUI
"  isn't available may be undesirable.
d76 6
d110 1
d169 29
@


1.8
log
@*** empty log message ***
@
text
@d83 1
a83 1
	elseif exists('s:NetscapeRemoteCmd')
@


1.7
log
@Code improvements, mostly to detect which browsers actually exist.
@
text
@d6 3
a8 3
"  - Firefox  (remote [new window / new tab] / launch)  {1]
"  - Mozilla  (remote [new window / new tab] / launch)  {1]
"  - Netscape (remote [new window] / launch)            {1]
d29 1
a29 1
"    default to mozilla if more than one is running.
d33 2
a34 1
"    aren't actually seen.
d97 1
a97 1
"  :call LaunchBrowser([nolmf],[012])
d111 2
a112 2
"  1 - Failure (No browser was launched/controlled.)
"  0 - Success
d125 1
a125 1
		echomsg "E119: Wrong number of arguments for function: LaunchBrowser"
d127 1
a127 1
		return 1
d136 1
a136 1
			return 1
d146 1
a146 1
				return 1
d154 1
a154 1
				return 1
d158 1
a158 1
		return 0
d166 1
a166 1
			return 1
d175 1
a175 1
				return 1
d183 1
a183 1
				return 1
d191 1
a191 1
				return 1
d195 1
a195 1
		return 0
d219 1
a219 1
			return 1
d228 1
a228 1
				return 1
d237 1
a237 1
					return 1
d245 1
a245 1
					return 1
d253 1
a253 1
					return 1
d258 1
a258 1
		return 0
d265 1
a265 1
			return 1
d274 1
a274 1
				return 1
d283 1
a283 1
					return 1
d291 1
a291 1
					return 1
d299 1
a299 1
					return 1
d304 1
a304 1
		return 0
d311 1
a311 1
			return 1
d320 1
a320 1
				return 1
d329 1
a329 1
					return 1
d337 1
a337 1
					return 1
d342 1
a342 1
		return 0
d346 1
a346 1
	return 1
@


1.6
log
@Add firefox.
@
text
@d6 3
a8 5
"  - Firefox  (remote [new window / new tab] / launch)
"  - Mozilla  (remote [new window / new tab] / launch)
"  - Netscape (remote [new window] / launch)
"     The remote control for either of these will probably default to
"     mozilla if both are running.
d23 2
a24 2
"  same HTML rendering engine as mozilla, so supporting them isn't as
"  important.
d26 10
a35 1
"  The code is a mess.  Oh well.
d44 24
a67 3
let s:NetscapeRemoteCmd = system("which netscape-remote")
if v:shell_error != 0
	let s:NetscapeRemoteCmd = system("which netscape")
d69 5
a73 2
if v:shell_error != 0
	let s:NetscapeRemoteCmd = system("which mozilla")
d75 2
d78 13
a90 1
	let s:NetscapeRemoteCmd = system("which firefox")
d96 1
a96 1
"  :call LaunchBrowser([0123],[012])
d98 5
a102 5
"      0 - Netscape
"      1 - Opera
"      2 - Lynx
"      3 - Mozilla
"      4 - Firefox
d110 18
a127 3
"  0 - Failure (No browser was launched/controlled.)
"  1 - Success
function! LaunchBrowser(which,new)
d131 7
a137 1
	if ((! strlen($DISPLAY)) || a:which == 2 )
d140 1
a140 1
		if (has("gui_running") || a:new) && strlen($DISPLAY)
d145 1
a145 1
				return 0
d153 1
a153 1
				return 0
d157 1
a157 1
		return 1
d161 8
a168 2
	if (a:which == 1)
		if a:new == 2
d174 1
a174 1
				return 0
d176 1
a176 1
		elseif a:new
d182 1
a182 1
				return 0
d190 1
a190 1
				return 0
d194 1
a194 1
		return 1
d214 7
a220 1
	if (a:which == 4)
d227 1
a227 1
				return 0
d230 1
a230 1
			if a:new == 2
d236 1
a236 1
					return 0
d238 1
a238 1
			elseif a:new
d244 1
a244 1
					return 0
d252 1
a252 1
					return 0
d257 1
a257 1
		return 1
d260 7
a266 1
	if (a:which == 3)
d273 1
a273 1
				return 0
d276 1
a276 1
			if a:new == 2
d282 1
a282 1
					return 0
d284 1
a284 1
			elseif a:new
d290 1
a290 1
					return 0
d298 1
a298 1
					return 0
d303 1
a303 1
		return 1
d306 7
a312 1
	if (a:which == 0)
d319 1
a319 1
				return 0
d322 1
a322 1
			if a:new
d328 1
a328 1
					return 0
d336 1
a336 1
					return 0
d340 2
a341 1
		return 1
d345 1
a345 1
	return 0
@


1.5
log
@Skip loading if the script is already loaded.
@
text
@d6 1
d44 3
d57 1
d125 6
a130 1
	let windows = system("xwininfo -root -children | egrep \"[Nn]etscape|[Mm]ozilla\"; return 0")
d142 40
@


1.4
log
@Made the NetscapeRemoteCmd variable script local.
@
text
@d32 4
@


1.3
log
@Support opening a new tab in Opera.
@
text
@d32 1
a32 1
let NetscapeRemoteCmd = system("which netscape-remote")
d34 1
a34 1
	let NetscapeRemoteCmd = system("which netscape")
d36 4
a39 1
let NetscapeRemoteCmd = substitute(NetscapeRemoteCmd, "\n$", "", "")
d140 1
a140 1
				call system(g:NetscapeRemoteCmd . " -remote \"openURL(file://" . file . ",new-tab)\"")
d148 1
a148 1
				call system(g:NetscapeRemoteCmd . " -remote \"openURL(file://" . file . ",new-window)\"")
d156 1
a156 1
				call system(g:NetscapeRemoteCmd . " -remote \"openURL(file://" . file . ")\"")
d180 1
a180 1
				call system(g:NetscapeRemoteCmd . " -remote \"openURL(file://" . file . ",new-window)\"")
d188 1
a188 1
				call system(g:NetscapeRemoteCmd . " -remote \"openURL(file://" . file . ")\"")
@


1.2
log
@*** empty log message ***
@
text
@d10 1
a10 1
"  - Opera    (remote [new window] / launch)
d84 10
a93 2
		if a:new
			echohl Todo | echo "Launching new Opera window..." | echohl None
d144 1
a144 1
				echohl Todo | echo "Mozilla is running, launching new window..." | echohl None
d176 1
a176 1
				echohl Todo | echo "Netscape is running, launching new window..." | echohl None
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
" Vim script to launch a browser.
d6 4
a9 2
"  - Netscape (remote [new window] / launch)  (This handles mozille instead
"                                              if it's running.)
d16 1
a16 1
"  Support the following browsers:
a18 4
"   - galeon (gui browser - I currently can't compile it)
"
"  I need to separate the Netscape and Mozilla code.  (At least make it
"  possible to launch one or the other.)
d22 4
a31 4
" Set this once, as it's unlikely to change:
" let UserName = system("whoami")
" let UserName = substitute(UserName, "\n$", "", "")

d39 2
a40 2
" Syntax:
"  :call LaunchBrowser([012],[01])
d45 1
d49 6
a59 1

d67 1
d70 1
a70 1
			sleep 2
d75 1
a79 1

d90 1
d98 1
a102 1

d105 2
a106 9

	" At this point, figure out how to handle netscape/mozilla.

	" echohl Todo | echo "Please wait..." | echohl None

	"let grep = system("ps auxwwwwww | egrep \"" . g:UserName . " .+[Nn]etscape\" | egrep -v \"[Zz]ombie\" ; return 0")
	"let grep = system("xlsclients | egrep \"[Nn]etscape\"; return 0")
	let grep = system("xwininfo -root -children | egrep \"[Nn]etscape|[Mm]ozilla\"; return 0")
	if grep =~? 'mozilla'
d111 1
a111 1
	if grep =~? 'netscape'
d124 1
d133 1
d141 1
d149 1
d164 1
d173 1
d181 1
a186 31

	" if a:new
	" 	if ! NetscapeRunning
	" 		echohl ErrorMsg | echo "Netscape isn't running, use ;ns instead." | echohl None
	" 		return 1
	" 	else
	" 		echohl Todo | echo "Netscape is running, launching new window..." | echohl None
	" 		call system(g:NetscapeRemoteCmd . " -remote \"openURL(file://" . file . ",new-window)\"")

	" 		if shell_error
	" 			echohl ErrorMsg | echo "Unable to issue remote command." | echohl None
	" 		endif

	" 	endif
	" else
	" 	if ! NetscapeRunning
	" 		echohl Todo | echo "Launching netscape, please wait..." | echohl None
	" 		call system("sh -c \"trap '' HUP; netscape " . file . " &\"")

	" 		if shell_error
	" 			echohl ErrorMsg | echo "Unable to launch netscape." | echohl None
	" 		endif
	" 	else
	" 		echohl Todo | echo "Netscape is running, issuing remote command..." | echohl None
	" 		call system(g:NetscapeRemoteCmd . " -remote \"openURL(file://" . file . ")\"")
	" 		
	" 		if shell_error
	" 			echohl ErrorMsg | echo "Unable to issue remote command." | echohl None
	" 		endif
	" 	endif
	" endif
@
